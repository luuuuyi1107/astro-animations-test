---
import LotteryBall from "./LotteryBall.astro";
type Props = {
  class?: string;
};

const { class: customClass = "" } = Astro.props as Props;
---


<script>
  import { parseJsonDate } from "@/libs/Common";
  import { useApi } from "../libs/Api";
  
  function initLotterData () {
    const apiComponent = document.querySelector('[data-component="api-data"]') as HTMLElement;
    if (!apiComponent) return; // 取得 DOM 元素
    const dataContainer = apiComponent.querySelector('.data-container') as HTMLElement;
    
    let updateCount = 0;
    let intervalId: number | null = null;
  
    // 格式化倒数时间为 HH:MM:SS
    function formatCountdown(totalSeconds: number): string {
      if (totalSeconds <= 0) return "00:00:00";
      const hours = Math.floor(totalSeconds / 3600);
      const minutes = Math.floor((totalSeconds % 3600) / 60);
      const seconds = Math.floor(totalSeconds % 60);
      
      return [
        hours.toString().padStart(2, '0'),
        minutes.toString().padStart(2, '0'),
        seconds.toString().padStart(2, '0')
      ].join(':');
    }

    // 使用服务器提供的剩余时间启动倒数计时
    function startCountdownFromSeconds(remainingSeconds: number) {
      const countDownElement = document.getElementById('countDown');
      if (!countDownElement) return;
      
      // 清除现有计时器
      if (countDownElement.dataset.timerId) {
        clearInterval(parseInt(countDownElement.dataset.timerId));
      }
      
      // 存储初始剩余秒数
      let secondsLeft = remainingSeconds;
      
      // 计时器函数
      function tick() {
        if (!countDownElement) return;
        // 减少一秒
        secondsLeft--;
        
        // 更新 DOM
        countDownElement.textContent = formatCountdown(Math.max(0, secondsLeft));
        
        // 如果倒数结束，停止更新
        if (secondsLeft <= 0) {
          clearInterval(timerInterval);
          countDownElement.textContent = "开奖中...";
          // 可选：5秒后自动重新载入数据
          setTimeout(() => performApiRequest(), 5000);
        }
      }
      
      // 立即执行一次
      countDownElement.textContent = formatCountdown(secondsLeft);
      
      // 设置每秒更新
      const timerInterval = setInterval(tick, 1000);
      
      // 保存计时器 ID
      countDownElement.dataset.timerId = String(timerInterval);
    }
    
    // 更新资料显示
    function updateDataDisplay(data: any) {
      dataContainer.style.display = 'block';
      updateCount++;
      // 触发资料更新事件
      const updateEvent = new CustomEvent('api-data-updated', {
        detail: {
          data: data.Data,
          updateCount: updateCount,
          timestamp: new Date().toISOString()
        },
        bubbles: true
      });
      document.dispatchEvent(updateEvent);

      const LastKaiGameIDSpan = document.getElementById('lastKaiGameID');
      if (LastKaiGameIDSpan) {
        LastKaiGameIDSpan.textContent = data.Data?.OpenLottery?.LastKai?.GameID || '无资料';
      }

      const newKaiGameIDSpan = document.getElementById('newKaiGameID');
      if (newKaiGameIDSpan) {
        newKaiGameIDSpan.textContent = data.Data?.OpenLottery?.NewKai?.GameID || '无资料';
      }

      if (data.Data && data.Data.OpenLottery && data.Data.ServerTime) {
        startPollingAfterEndTime(data.Data);
      }
    }
    // 执行 API 请求
    async function performApiRequest() {
      try {
        updateDataDisplay(await useApi("base").getPush({lotteryid: 21}));
      } catch (error) {
        console.error('API request failed:', error);
      }
    }
    
    function startPolling() {
      performApiRequest();
    }
    
    // 停止定时请求
    function stopPolling() {
      if (intervalId) {
        clearInterval(intervalId);
        intervalId = null;
      }
    }
    
    
    async function startPollingAfterEndTime(data: iGetPush) {
      const serverTime = parseJsonDate(data.ServerTime).getTime();
      const endTime = parseJsonDate(data.OpenLottery?.NewKai?.EndTime).getTime();
      // const lastKaiTime = parseJsonDate(data.OpenLottery?.LastKai.KaiTime);
      // const newKaiTime = parseJsonDate(data.OpenLottery?.NewKai.KaiTime);
      const newKaiGameID = data.OpenLottery?.NewKai?.GameID;

      // 计算剩余时间
      const timeUntilEnd = endTime - serverTime;
      if (!newKaiGameID) {
        console.warn('NewKai GameID 不存在，无法开始轮询');
        return;
      }
      if (timeUntilEnd > 0) {
        console.log(`等待 ${timeUntilEnd / 1000} 秒后开始轮询`);
        // 设置倒计时
        setTimeout(() => {
          console.log('EndTime 到达，开始轮询 API');
          startPollingForNewGameID(newKaiGameID);
        }, timeUntilEnd);

        startCountdownFromSeconds(Math.ceil(timeUntilEnd / 1000)); // 启动倒计时

      } else {
        console.log('EndTime 已过，立即开始轮询 API');
        startPollingForNewGameID(newKaiGameID);
      }
    }

    function startPollingForNewGameID(currentGameID: string) {
      const pollingInterval = 3000; // 每 3 秒轮询一次
      let pollingTimer: ReturnType<typeof setInterval> | null = null;
      async function pollApi() {
        try {
          // const data = await fetchApiData(); // 假设 fetchApiData 是已定义的 API 请求函数
          const data = await useApi("base").getPush({lotteryid: 21})
          console.log('轮询 API 获取资料:', data);
          const newGameID = data.Data?.OpenLottery?.NewKai?.GameID;
          // console.log('轮询 API，当前 GameID:', currentGameID, '新 GameID:', newGameID);
          if (newGameID !== currentGameID) {
            console.log('检测到新的 GameID:', newGameID);
            pollingTimer && clearInterval(pollingTimer); // 停止轮询
          } else {
            console.log('尚未检测到新的 GameID，继续轮询...');
            console.log({ newGameID, currentGameID });
          }
        } catch (error) {
          console.error('轮询 API 时发生错误:', error);
        }
      }

      // 开始轮询
      pollingTimer = setInterval(pollApi, pollingInterval);
    }

    // 开始轮询
    startPolling();

    // 页面卸载时清理定时器
    window.addEventListener('beforeunload', function() {
      stopPolling();
    });
  }

  document.addEventListener('DOMContentLoaded', initLotterData);
  document.addEventListener('astro:page-load', initLotterData);

</script>

<div class={"api-component " + customClass} data-component="api-data">
  <!-- 资料容器 -->
  <div class="data-container text-[13px]">
    <div class="flex justify-between items-center w-full">
      <div>
        <span id="lastKaiGameID" class="font-[600] mr-1">2025000</span>
        期开奖结果
      </div>
      <div class="text-red-400">余额: 9342.00元</div>
    </div>
    <LotteryBall ballLength={6} />
    <div class="border-y border-gray-200 py-2 mt-2 leading-none">
      <span id="newKaiGameID"  class="font-[600] mr-1">2025000</span>
      投注截止时间
      <span class="text-red-600" id="countDown" />
    </div>
  </div>
</div>
