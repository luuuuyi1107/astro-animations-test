
---
type Props = {
  ballLength?: number;
};
const { ballLength = 6 } = Astro.props as Props;
---

<div class="lottery-balls-container">  
  <div class="flex items-center space-x-2">
    {
      Array.from({ length: ballLength }, () => (
        <div class="ball">
          <div class="num">0</div>
          <div class="text" />
        </div>
      ))
    }
    <div class="ball-separator">+</div>
    
    <div class="ball">
      <div class="num">0</div>
      <div class="text" />
    </div>
  </div>
  
</div>

<script >
  import { useLotteryStore } from '@/store/lottery'
  import { ZodiacnimalMap } from "@/libs/constants";
  const ANIMATION_DURATION = 500; // 动画间隔时间 (毫秒)
  function init () {
    const store = useLotteryStore();
    const balls: Element[] = Array.from(document.querySelectorAll('.ball'));

    store.$subscribe((_, state) => {
      if (state.lottery?.OpenLottery?.LastKai?.KaiText) {
        stopAnimation();
        const ballNums = state.lottery.OpenLottery.LastKai.KaiText.split(",");
        balls.forEach((ball, index) => {
          updateBall(ball, ballNums[index]);
        });
      } else {
        startAnimation();
      }
    });

    let animationInterval: NodeJS.Timeout | null = null;
    let isAnimating = false;
    // 生成随机数字 (1-49 用于普通球, 1-8 用于特别球)
    function getRandomNumber(min: number, max: number) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function getColorByNumber(num: number) {
      const _num = num % 3
      return _num === 0 ? "red" : _num === 1 ? "green" : "blue"
    }

    // 更新单一球的显示
    function updateBall(ballElement: Element, num?: number) {
      const _num = num || getRandomNumber(1, 49).toString().padStart(1, '0')

      const color = getColorByNumber(+_num)
      // 添加转换效果
      if (ballElement.textContent === _num + "") return
      ballElement.setAttribute("class", `ball ${color}`);
      // 确保 'num' 元素存在
      const numElement = ballElement.getElementsByClassName('num')[0] as HTMLElement | undefined;
      if (numElement) {
        numElement.textContent = _num + "";
      }

      // 确保 'text' 元素存在
      const textElement = ballElement.getElementsByClassName('text')[0] as HTMLElement | undefined;
      if (textElement) {
        textElement.textContent = ZodiacnimalMap[+_num % 12] || "";
      }
    }
    
    // 更新所有球
    function updateAllBalls() {
      balls.forEach((el) => updateBall(el));
    }
    
    // 开始动画
    function startAnimation() {
      if (isAnimating) return;
      isAnimating = true;
      updateAllBalls();
      animationInterval = setInterval(updateAllBalls, ANIMATION_DURATION);
    }
    
    // 停止动画
    function stopAnimation() {
      if (!isAnimating) return;
      animationInterval && clearInterval(animationInterval);
      isAnimating = false;
    }

    if (store.lottery?.OpenLottery?.LastKai?.KaiText) {
      const ballNums = store.lottery.OpenLottery?.LastKai?.KaiText.split(",")
      balls.forEach((ball, index) => {
        updateBall(ball, ballNums[index]);
      });
    } else {
      startAnimation()
    }

    // 当页面不可见时暂停动画 (节省资源)
    document.addEventListener('visibilitychange', function() {
      if (document.hidden && isAnimating) {
        animationInterval && clearInterval(animationInterval);
      } else if (!document.hidden && isAnimating) {
        updateAllBalls()
        animationInterval = setInterval(updateAllBalls, ANIMATION_DURATION);
      }
    });
  }

  // document.addEventListener('DOMContentLoaded', init);
  document.addEventListener('astro:page-load', init);
</script>

<style>
.lottery-balls-container .ball {
  .num {
    @apply w-5 h-5 rounded-full text-white text-center leading-5 text-xs bg-red-600;
  }

  &.blue .num {
    @apply bg-blue-600;
  }
  &.green .num {
    @apply bg-green-600;
  }
  &.red .num {
    @apply bg-red-600;
  }

  .text {
    @apply text-center min-h-5;
  }
}


</style>