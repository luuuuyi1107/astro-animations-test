---
import Balls from "./Balls.astro";
import Countdown from "./Countdown.astro";

type Props = {
  class?: string;
};

const { class: customClass = "" } = Astro.props as Props;
---

<script>
  import { useLotteryStore } from '@/store/lottery'

  function initLotterData() {
    const store = useLotteryStore();
    const apiComponent = document.querySelector('[data-component="api-data"]') as HTMLElement;
    if (!apiComponent) return;
    const dataContainer = apiComponent.querySelector('.data-container') as HTMLElement;
    let refreshInterval: NodeJS.Timeout | null = null;
    let refreshCount = 0;
    const maxRefreshes = 10; // 最多刷新 10 次

    store.$subscribe((_, state) => {
      if (state.lottery?.OpenLottery?.LastKai) {
        updateDataDisplay(state.lottery);
      }
    });

    // 更新资料显示
    function updateDataDisplay(data: iGetPush) {
      dataContainer.style.display = 'block';
      // 更新 UI 元素
      const LastKaiGameIDSpan = document.getElementById('lastKaiGameID');
      if (LastKaiGameIDSpan) {
        LastKaiGameIDSpan.textContent = data?.OpenLottery?.LastKai?.GameID || '无资料';
      }
      const newKaiGameIDSpan = document.getElementById('newKaiGameID');
      if (newKaiGameIDSpan) {
        newKaiGameIDSpan.textContent = data?.OpenLottery?.NewKai?.GameID || '无资料';
      }

      const userMoneySpan = document.getElementById('userMoney');
      if (userMoneySpan) {
        userMoneySpan.textContent = data?.UserData?.Money ? data?.UserData?.Money.toFixed(2) : '0.00';
      }

      if (store.timeUntilEnd === null || store.timeUntilEnd === 0 || store.timeUntilEnd <= 0) {
        if (!refreshInterval) {
          handleAutoRefreshProgressive();
        }
      } else {
        stopAutoRefresh();
      }
    }

    

    function handleAutoRefreshProgressive() {
      // 如果已经在刷新，不要重复启动
      if (refreshInterval) {
        return;
      }
      
      refreshCount = 0; // 重置计数器
      refreshInterval = setInterval(async () => {
        refreshCount++;
        console.log(`自动刷新 ${refreshCount}/${maxRefreshes}`);
        // 在每次刷新前检查 timeLeft
        console.log({ store })
        if (store.timeUntilEnd && store.timeUntilEnd > 0) {
          stopAutoRefresh();
          return;
        }
        
        // 执行刷新
        fetchData();

        if (store.lottery) {
          updateDataDisplay(store.lottery);
        } else {
          console.warn('没有获取到最新的开奖数据');
        }
        
        // 达到最大次数后停止
        if (refreshCount >= maxRefreshes) {
          console.log('达到最大刷新次数，停止自动刷新');
          stopAutoRefresh();
        }
      }, 3000);
    }

    // 停止自动刷新的函数
    function stopAutoRefresh() {
      if (refreshInterval) {
        clearInterval(refreshInterval);
        refreshInterval = null;
        refreshCount = 0; // 重置计数器
        console.log('倒计时恢复，停止自动刷新');
      }
    }

    // 初始化 - 获取第一次数据
    async function fetchData() {
      await store.fetchLotteryDataById(21)
    }

    if (store.lottery?.OpenLottery) { // 如果已经有数据，直接更新显示
      updateDataDisplay(store.lottery);
    }
    
    fetchData();
  }
  document.addEventListener('astro:page-load', initLotterData);
</script>

<div class={"api-component " + customClass} data-component="api-data">
  <!-- 资料容器 -->
  <div class="data-container text-[13px]">
    <div class="flex justify-between items-center w-full">
      <div>
        <span id="lastKaiGameID" class="font-[600] mr-1">2025000</span>
        期开奖结果
      </div>
      <div class="text-red-400">余额: <span id="userMoney">0.00</span>元</div>
    </div>
    <Balls ballLength={6} />
    <div class="border-y border-gray-200 py-2 mt-2 leading-none">
      <span id="newKaiGameID" class="font-[600] mr-1">2025000</span>
      投注截止时间
      <Countdown id="countDown" endText="开奖中..." />
    </div>
  </div>
</div>